#!/bin/bash
# Script that checks whether Postgresql Server is still up, and if not:
# - e-mail the last bit of log files
# - restarts it

POSTGRES_MONITORING_TEMP_DIR=/tmp/postgres-monitoring
ADDRESS_MONITORING_MAIL={{ postgres_monitoring_mail }}
POSTGRES_STOP_CMD="{{ postgres_stop_command }}"
POSTGRES_START_CMD="{{ postgres_start_command }}"
POSTGRES_SERVICE_NAME="{{ postgres_service_name }}"
POSTGRES_LOG_FILE="{{ postgres_log_file }}"
mkdir -p $POSTGRES_MONITORING_TEMP_DIR

# Check status of Postgresql Server
COUNT=$(ps auxw|grep $POSTGRES_SERVICE_NAME|grep -v grep|grep -v postgres_monitoring.sh|wc -l)
if [ $COUNT -eq 0 ]
then
    # Postgresql Server is down.
    # Try to restart ans send an mail to administrator
    MAIL_CONTENT=$POSTGRES_MONITORING_TEMP_DIR/postgres_mail.txt
    echo -n "Postgresql Server is down at " > $MAIL_CONTENT
    date >> $MAIL_CONTENT
    echo >> $MAIL_CONTENT
    echo "------------------------" >> $MAIL_CONTENT
    echo "Error log:" >> $MAIL_CONTENT
    echo "------------------------" >> $MAIL_CONTENT
    tail -n 30 $POSTGRES_LOG_FILE >> $MAIL_CONTENT
    echo >> $MAIL_CONTENT
    # Restart Postgresql Server
    echo "Restarting Postgresql Server..." >> $MAIL_CONTENT  
    $POSTGRES_STOP_CMD >> $MAIL_CONTENT 2>&1
    killall -3 $POSTGRES_SERVICE_NAME
    $POSTGRES_START_CMD >> $MAIL_CONTENT 2>&1
    echo >> $MAIL_CONTENT
    mail -s "Postgresql-monitoring: $(hostname) Postgresql Server down" $ADDRESS_MONITORING_MAIL <$MAIL_CONTENT
    rm $MAIL_CONTENT
fi
rm -rf $POSTGRES_MONITORING_TEMP_DIR