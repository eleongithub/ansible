#!/bin/bash
 
###########################
####### LOAD CONFIG #######
###########################
 
while [ $# -gt 0 ]; do
        case $1 in
                -c)
                        CONFIG_FILE_PATH="$2"
                        shift 2
                        ;;
                *)
                        ${ECHO} "Unknown Option \"$1\"" 1>&2
                        exit 2
                        ;;
        esac
done
 
if [ -z $CONFIG_FILE_PATH ] ; then
        SCRIPTPATH=$(pwd -P)
        CONFIG_FILE_PATH="${SCRIPTPATH}/pg_backup.config"
fi
 
if [ ! -r ${CONFIG_FILE_PATH} ] ; then
        echo "Could not load config file from ${CONFIG_FILE_PATH}" 1>&2
        exit 1
fi
 
source "${CONFIG_FILE_PATH}"
 

 
###########################
### INITIALISE DEFAULTS ###
###########################
 
if [ ! $HOSTNAME ]; then
	HOSTNAME="localhost"
fi;
 
if [ ! $USERNAME ]; then
	USERNAME="postgres"
fi;
 
 
###########################
#### START THE BACKUPS ####
###########################
 
function perform_backups()
{

 
	for SCHEMA_ONLY_DB in ${SCHEMA_ONLY_LIST//,/ }
	do
		EXCLUDE_SCHEMA_ONLY_CLAUSE="$EXCLUDE_SCHEMA_ONLY_CLAUSE and datname !~ '$SCHEMA_ONLY_DB'"
	done
 
	FULL_BACKUP_QUERY="select datname from pg_database where not datistemplate and datallowconn $EXCLUDE_SCHEMA_ONLY_CLAUSE order by datname;"
 
	echo -e "\n\nPerforming full backups"
	echo -e "--------------------------------------------\n"
	
	for DATABASE in `psql -U "$USERNAME" -At -c "$FULL_BACKUP_QUERY" postgres`
	do
		FINAL_BACKUP_DIR=$BACKUP_DIR"$DATABASE/""`date +\%Y-\%m-\%d`/"
 
		echo "Making backup directory in $FINAL_BACKUP_DIR"
 
		if ! mkdir -p $FINAL_BACKUP_DIR; then
			echo "Cannot create backup directory in $FINAL_BACKUP_DIR. Go and fix it!" 1>&2
			exit 1;
		fi;
		
		TIMESTAMP_VALUE=`date +\%Y\%m\%dT\%H\%M\%S`
		
		if [ $ENABLE_PLAIN_BACKUPS = "yes" ]
		then
			echo "Plain backup of $DATABASE"
 
			if ! pg_dump -Fp -U "$USERNAME" "$DATABASE" | gzip > $FINAL_BACKUP_DIR"$TIMESTAMP_VALUE".sql.gz.in_progress; then
				echo "[!!ERROR!!] Failed to produce plain backup database $DATABASE" 1>&2
			else
				mv $FINAL_BACKUP_DIR"$TIMESTAMP_VALUE".sql.gz.in_progress $FINAL_BACKUP_DIR"$TIMESTAMP_VALUE".sql.gz
			fi
		fi
 
		if [ -z $CUSTOM_BACKUPS ]
		then
			echo "Custom backup of $DATABASE"
 
			if ! pg_dump -Fc -U "$USERNAME" "$DATABASE" -f $FINAL_BACKUP_DIR"$TIMESTAMP_VALUE".$CUSTOM_BACKUPS.in_progress; then
				echo "[!!ERROR!!] Failed to produce custom backup database $DATABASE"
			else
				mv $FINAL_BACKUP_DIR"$TIMESTAMP_VALUE".$CUSTOM_BACKUPS.in_progress $FINAL_BACKUP_DIR"$TIMESTAMP_VALUE".$CUSTOM_BACKUPS
			fi
		fi
	done
	echo -e "\nAll database backups complete!"
}
 
# DAILY BACKUPS
if [ $ENABLE_PLAIN_BACKUPS = "yes" ]; then
	EXTENSION="*.sql.gz"
else
	EXTENSION=$CUSTOM_BACKUPS
fi
# Iterate over backup directory
for DATABASE_BACKUP in $(find $BACKUP_DIR -mtime +$DAYS_TO_KEEP -type f -name "$EXTENSION")
do 
	DATABASE_BACKUP_DIR=$(dirname "$DATABASE_BACKUP") 	
	# Delete daily backups $DAYS_TO_KEEP days old or more
	find $DATABASE_BACKUP_DIR -mtime +$DAYS_TO_KEEP -exec rm -rf '{}' ';'
done

perform_backups "-daily"