---
# This playbook contains tomcat-installation plays that will be run on tomcat web server node.
    
# Stop eventual tomcat server running
- name: Stop eventual tomcat server running
  service: name=tomcat state=stopped enabled=no
  ignore_errors: true

# Remove eventual tomcat from boot service
- name: Remove eventual tomcat from boot service
  shell: insserv -r tomcat
  ignore_errors: true
  
# Remove eventual tomcat init script from the system
- name : Remove eventual tomcat init script from the system
  file: 
    path: "{{ tomcat_init_script }}"
    state: absent
  ignore_errors: true
  
# Delete User tomcat if exists
- name: Delete User Tomcat 
  user: name={{ tomcat_user }} state=absent
  ignore_errors: true

# Delete Group tomcat if exists
- name: Delete Group Tomcat 
  group: name={{ tomcat_user_group }} state=absent
  ignore_errors: true
  
# Create Group Tomcat
- name: Create Group Tomcat 
  group: name={{ tomcat_user_group }} state=present

# Create User Tomcat
- name: Create User Tomcat 
  user: name={{ tomcat_user }} createhome=no group={{ tomcat_user_group }} shell=/bin/bash state=present
  
# Check tomcat version directory exists
- name : Check tomcat version directory exists
  stat: path={{ tomcat_versions }}
  register: tomcat_versions_dir_exists
  
# Create tomcat version directory if not exists
- name: Create tomcat versions directory
  file: 
    path: "{{ tomcat_versions }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_user_group }}"
    state: directory 
    recurse: yes
  when: not tomcat_versions_dir_exists.stat.exists

# Delete the tomcat link if exists 
- name: Delete the tomcat home link 
  file: 
    dest: "{{ tomcat_home }}"
    state: absent
  
# Delete the tomcat last version directory
- name: Delete the last version directory
  file: 
    dest: "{{ tomcat_last_version }}"
    state: absent
  ignore_errors: true
  
# Install required packages/librairies
- name: Install required librairies
  apt: pkg={{item.package}} state=present
  with_items: "{{ required_packages }}"

# Unzip tomcat archive
- name: Unzip the tomcat archive
  unarchive: src={{ tomcat_tarball_name }} dest="{{ tomcat_versions }}/"
  
# Unarchive Tomcat native library
- name: Unarchive Tomcat native library
  unarchive: src={{ libtcnative_util_tarball_name }} dest="{{ tomcat_last_version }}/bin"
   
# Install Tomcat native library
- name: Install Tomcat native library
  shell: cd {{ libtcnative_util_home }} && ./configure --with-apr={{ apr_config_file }} --with-java-home={{ java_home }} --prefix={{ tomcat_last_version }} && make && make install
  when: "{{ not open_ssl_enable }}"
  
# Install Tomcat native library
- name: Install Tomcat native library with SSL
  shell: cd {{ libtcnative_util_home }} && ./configure --with-apr={{ apr_config_file }} --with-java-home={{ java_home }} --with-ssl=yes --prefix={{ tomcat_last_version }} && make && make install
  when: "{{ open_ssl_enable }}"
  
# Deploy conf Tomcat files (server.xml and setenv.sh) 
- name: Deploy conf Tomcat files (server.xml and setenv.sh)
  template: src={{item.src}} dest={{item.dest}} force={{item.force}}
  with_items:
   - "{{ tomcat_conf_files }}"
   
# Create tomcat security directory if not exists
- name: Create tomcat security directory
  file: 
    path: "{{ secure_conf_dir }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_user_group }}"
    state: directory 
    recurse: yes
  when: "{{ open_ssl_enable or keystore_ssl_enable }}"
   
# Install SSL with Openssl 
- name: Install SSL certificats files with openssl
  include: open_ssl_main.yml
  when: "{{ open_ssl_enable }}"
  
# Install SSL files with Java Keytool
- name: Install SSL files with Java Keytool
  include: keystore_ssl_main.yml
  when: "{{ keystore_ssl_enable }}"
  
  
# Install OWASP recommandations : https://www.owasp.org/index.php/Securing_tomcat
- name: Install OWASP recommandations
  include: owasp_main.yml
  
# Create link to the new tomcat directory
- name: Create link to the last tomcat directory
  file: 
    src: "{{ tomcat_last_version }}"
    path: "{{ tomcat_home }}"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_user_group }}"
    state: link

# Copy Tomcat init script
- name: Copy Tomcat init script
  template: 
    src: "tomcat.sh.j2"
    dest: "{{ tomcat_init_script }}"
    force: yes 
    mode: 0755

# Enable/Start Tomcat
- name: Enable/Start Tomcat
  service: name=tomcat enabled=yes