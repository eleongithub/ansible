---
# This playbook contains tomcat-installation plays that will be run on tomcat web server node.
    
# Stop eventual tomcat server runing
- name: Stop eventual tomcat server runing
  service: name=tomcat state=stopped enabled=no
  ignore_errors: true

# Remove eventual tomcat from boot service
- name: Remove eventual tomcat from boot service
  shell: insserv -r tomcat
  ignore_errors: true
  
# Remove eventual tomcat init script from the system
- name : Remove eventual tomcat init script from the system
  file: path=/etc/init.d/tomcat state=absent
  ignore_errors: true
  
# Delete User tomcat if exists
- name: Delete User Tomcat 
  user: name={{ tomcat_user }} state=absent
  ignore_errors: true

# Delete Group tomcat if exists
- name: Delete Group Tomcat 
  group: name={{ tomcat_group }} state=absent
  ignore_errors: true
  
# Create Group Tomcat
- name: Create Group Tomcat 
  group: name={{ tomcat_group }} state=present

# Create User Tomcat
- name: Create User Tomcat 
  user: name={{ tomcat_user }} createhome=no group={{ tomcat_group }} shell=/bin/bash state=present

# Check tomcat version directory exists
- name : Check tomcat version directory exists
  shell: ls {{ tomcat_versions }}
  register: check_tomcat_versions_dir_exists
  ignore_errors: true

# Create tomcat version directory if not exists
- name: Create tomcat version directory
  file: path={{ tomcat_versions }} owner={{ tomcat_user }} group={{ tomcat_group }} state=directory recurse=yes
  when: check_tomcat_versions_dir_exists.rc|int > 0

# Delete the current tomcat link if exists 
- name: Delete the current tomcat home link 
  file: dest={{ tomcat_home }} state=absent
  
# Delete the current tomcat last version directory
- name: Delete the current last version directory
  file: dest={{ tomcat_last_version }} state=absent
  ignore_errors: true
  
# Install required packages/librairies
- name: Install required librairies
  apt: pkg={{item.package}} state=present
  with_items: "{{ required_packages }}"

# Unzip tomcat archive
- name: Unzip the tomcat archive
  unarchive: src={{ tomcat_tarball_name }} dest="{{ tomcat_versions }}/"
  
# Unarchive Tomcat native library
- name: Unarchive Tomcat native library
  unarchive: src={{ libtcnative_util_tarball_name }} dest="{{ tomcat_last_version }}/bin"
   
# Install Tomcat native library
- name: Install Tomcat native library
  shell: cd {{ libtcnative_util_home }} && ./configure --with-apr={{ apr_config_file }} --with-java-home={{ java_home }} --prefix={{ tomcat_last_version }} && make && make install
  when: "{{ not enable_ssl }}"
  
# Install Tomcat native library
- name: Install Tomcat native library with SSL
  shell: cd {{ libtcnative_util_home }} && ./configure --with-apr={{ apr_config_file }} --with-java-home={{ java_home }} --with-ssl=yes --prefix={{ tomcat_last_version }} && make && make install
  when: "{{ enable_ssl }}"
  
# Deploy conf Tomcat files (server.xml and setenv.sh) 
- name: Deploy conf Tomcat files (server.xml and setenv.sh)
  template: src={{item.src}} dest={{item.dest}} force={{item.force}}
  with_items:
   - "{{ tomcat_conf_files }}"
   
# Install main SSL 
- name: Install SSL certificats files
  include: ssl_main.yml
  when: "{{ enable_ssl }}"
  
# Install OWASP recommandations : https://www.owasp.org/index.php/Securing_tomcat
- name: Install SSL certificats files
  include: owasp_main.yml
  
# Create link to the new tomcat directory
- name: Create link to the new tomcat directory
  file: src={{ tomcat_last_version }} path={{ tomcat_home }} owner={{ tomcat_user }} group={{ tomcat_group }} state=link

# Copy Tomcat init script
- name: Copy Tomcat init script
  template: src=tomcat.sh dest=/etc/init.d/tomcat force=yes mode=0755

# Enable/Start Tomcat
- name: Enable/Start Tomcat
  service: name=tomcat state=started enabled=yes