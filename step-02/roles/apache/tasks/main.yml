---
# This playbook contains apache installation.

# Stop eventual Apache server running
- name: Stop eventual Apache server runing
  service: name=apache state=stopped enabled=no
  ignore_errors: true

# Remove eventual Apache from boot service
- name: Remove eventual Apache from boot service
  shell: insserv -r apache
  ignore_errors: true
  
# Remove eventual Apache init script from the system
- name : Remove eventual Apache init script from the system
  file: 
    path: "{{ apache_init_script }}"
    state: absent
  ignore_errors: true
  
# Install required packages/librairies
- name: Install required librairies
  apt: pkg={{ item.package }} state=present
  with_items: "{{ apache_required_packages }}"
  
# Delete user Apache
- name: Delete user Apache
  user: name={{ apache_user }} state=absent
  ignore_errors: true

# Delete group Apache
- name: Delete group Apache
  group: name={{ apache_user_group }} state=absent
  ignore_errors: true
  
# Create Group Apache
- name: Create Group Apache 
  group: name={{ apache_user_group }} state=present

# Create User Apache
- name: Create User Apache 
  user: 
    name: "{{ apache_user }}"
    createhome: no 
    group: "{{ apache_user_group }}"
    shell: /bin/false 
    comment: "Web Server"
    state: present
  
# - Check if apache versions directory exists.
- name : Check apache versions directory exists
  stat: path={{ apache_versions }}
  register: apache_versions_dir_exists

# - Create a apache versions directory. If directory exists, do nothing.
- name: Create apache versions directory
  file: 
    path: "{{ apache_versions }}"
    state: directory
  when: not apache_versions_dir_exists.stat.exists
  
# - Delete Apache home directory 
- name: Delete Apache home directory 
  file: 
    path: "{{ apache_home }}"
    state: absent
  
# - Unzip Apache archive
- name: Unzip Apache archive
  unarchive: 
    src: "{{ apache_tarball_name }}"
    dest: "{{ apache_versions }}/"
    
# - Create a Apache home directory.
- name: Create Apache home directory
  file: 
    path: "{{ apache_home }}"
    state: directory
  
# - Compile Apache
- name: Compile Apache 
  shell: cd {{ apache_last_version }} &&
                ./configure 
                --prefix={{ apache_home }}
                --with-mpm=worker
                --enable-so
                --enable-cache
                --enable-cache_disk
                --enable-socache_memcache
                --enable-mod_dir
                --enable-imagemap
                --enable-include
                --enable-log_config
                --enable-logio
                --enable-log_debug
                --enable-proxy
                --enable-access
                --enable-mime
                --enable-rewrite
                --enable-alias
                --enable-deflate
                --enable-expires
                --enable-headers
                --enable-status
                --enable-ssl
                --enable-socache_shmcb
                --enable-setenvif
                --enable-socache_dbm               
                --disable-actions
                --disable-env
                --disable-authz_dbm
                --disable-cgi
                --disable-auth_digest
                --disable-authnz_ldap
                --disable-autoindex
                --disable-asis
                --disable-cgid
                --disable-negotiation
                --disable-userdir
                --disable-charset-lite
      
- name: Execute commands to install Apache. 
  shell: cd {{ apache_last_version }} && make && umask 022 && make install && make clean

- name: Change the right of Apache directory 
  shell: chown -R root:sys {{ apache_home }}
  
# Deploy configuration file for Apache
- name: Deploy configuration file for Apache
  template: 
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    force: "{{item.force}}"
  with_items: "{{ apache_conf_files }}"
   
# Copy Apache init script
- name: Copy Apache init script
  template: 
    src: apache.sh.j2 
    dest: "{{ apache_init_script }}"
    force: yes 
    mode: 0755

# Enable/Start Apache
- name: Enable Apache init script
  service: name=apache enabled=yes
  
# Install Mod Security for Apache
- name: Install Mod Security for Apache
  include: mod_security_main.yml
  
# Install certification authority files if mod_ssl is enabled
- name: Install certification authority files if mod_ssl is enabled
  include: certifcation_authority_main.yml
  when: "{{ apache_with_ssl }}"
  
# Install Mod JK if mod_jk is enabled
- name: Install Mod JK if mod_jk is enabled
  include: mod_jk_main.yml
  when: "{{ mod_jk_enable }}"
 
- name: Restart Apache
  command: echo "Restart Apache service..."
  notify: 
    - Restart Apache
# TODO : VERIFIER LES DROITS DES REPERTOIRES